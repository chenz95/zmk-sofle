#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/* ß */
#define DE_SHARP_S (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_MINUS_AND_UNDERSCORE))
#define DE_ESZETT (DE_SHARP_S)
#define DE_SZ (DE_SHARP_S)

/* ä */
#define DE_A_UMLAUT (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_APOSTROPHE_AND_QUOTE))

/* ö */
#define DE_O_UMLAUT (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_SEMICOLON_AND_COLON))

/* ü */
#define DE_U_UMLAUT (ZMK_HID_USAGE(HID_USAGE_KEY, HID_USAGE_KEY_KEYBOARD_LEFT_BRACKET_AND_LEFT_BRACE))

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    macros {
        macro1: macro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp G &kp X &kp SEMI &kp LS(B) &kp G &kp LS(O) &kp LS(H) &kp H &kp N &kp LS(J) &kp B &kp N1 &kp N9 &kp N9 &kp N5>;
            label = "macro1";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC           &kp N1        &kp N2        &kp N3           &kp N4     &kp N5       &msc SCRL_UP     &kp N6     &kp N7     &kp N8        &kp N9           &kp N0        &kp BACKSPACE
&kp TAB           &kp Q         &kp W         &kp E            &kp R      &kp T        &msc SCRL_DOWN   &kp Y      &kp U      &kp I         &kp O            &kp P         &kp BSLH
&kp LEFT_CONTROL  &kp A         &kp S         &kp D            &kp F      &kp G        &kp LEFT_ARROW   &kp H      &kp J      &kp K         &kp L            &kp SEMI      &kp APOS
&kp LSHFT         &kp Z         &kp X         &kp C            &kp V      &kp B        &kp RIGHT_ARROW  &kp N      &kp M      &kp COMMA     &kp DOT          &kp FSLH      &kp ENTER
&kp C_MUTE        &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 BACKSPACE  &kp SPACE  &kp ENTER    &kp ENTER        &kp ENTER  &kp SPACE  &lt 2 DELETE  &kp RIGHT_SHIFT  &lt 3 ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp F12         &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &kp F11
&trans          &kp HOME         &kp END         &kp UP_ARROW     &kp DELETE       &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans          &kp DE_A_UMLAUT  &kp LEFT_ARROW  &kp DOWN_ARROW   &kp RIGHT_ARROW  &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp LEFT_SHIFT  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE      &trans           &trans          &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "left-l1";
            sensor-bindings = <&scroll_encoder>;
        };

        right-l1 {
            bindings = <
&kp TILDE       &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6   &kp F7           &kp F8          &kp F9           &kp F10    &kp DE_SZ
&trans          &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &macro1  &kp DE_U_UMLAUT  &kp UP_ARROW    &kp DE_O_UMLAUT  &kp MINUS  &kp EQUAL
&trans          &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans   &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LBRC   &kp RBRC
&kp LEFT_SHIFT  &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans   &kp HOME         &kp END         &kp KP_NUMLOCK   &trans     &trans
&trans          &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans   &trans           &trans          &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        right-l2 {
            bindings = <
&trans  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &rgb_ug RGB_COLOR_HSB(178,0,100)  &rgb_ug RGB_COLOR_HSB(195,35,69)  &rgb_ug RGB_COLOR_HSB(0,0,0)    &trans  &trans  &trans  &trans          &trans          &trans           &trans
&trans  &rgb_ug RGB_TOG  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI                   &rgb_ug RGB_SAI                   &rgb_ug RGB_EFF                 &trans  &trans  &trans  &mkp MCLK       &mmv MOVE_UP    &mkp RCLK        &trans
&trans  &trans           &rgb_ug RGB_BRD  &rgb_ug RGB_HUD                   &rgb_ug RGB_SAD                   &rgb_ug RGB_EFR                 &trans  &trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp LCLK
&trans  &trans           &trans           &trans                            &trans                            &trans                          &trans  &trans  &trans  &trans          &trans          &trans           &trans
&trans  &trans           &trans           &trans                            &trans                            &trans                          &trans  &trans  &trans  &trans          &trans          &trans
            >;
        };
    };
};
